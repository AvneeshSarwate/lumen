;; -*- mode: lisp -*-

(defun rep (str)
  (print (to-string (eval (compile (read-from-string str))))))

(defun repl ()
  (local execute (lambda (str) (rep str) (write "> ")))
  (write "> ")
  (target
   (js (do (process.stdin.resume)
	   (process.stdin.setEncoding 'utf8)
	   (process.stdin.on 'data execute)))
   (lua (while true
	  (local str (io.stdin:read))
	  (if str (execute str) break)))))

(defun usage ()
  (print "usage: x [options] [inputs]")
  (print "options:")
  (print "  -o <output>\tOutput file")
  (print "  -t <target>\tTarget language (default: lua)")
  (print "  -e <expr>\tExpression to evaluate")
  (print "  -m \t\tEmbed macro definitions in output")
  (exit))

(defun main ()
  (set args (target (js (sub process.argv 2)) (lua arg)))
  (if (or (= (at args 0) "-h")
	  (= (at args 0) "--help"))
      (usage))
  (do (local inputs ())
      (local output nil)
      (local target1 nil)
      (local expr nil)
      (across (args arg i)
	(if (or (= arg "-o") (= arg "-t") (= arg "-e"))
	    (if (= i (- (length args) 1))
		(print "missing argument for" arg)
	      (do (set i (+ i 1))
		  (local arg2 (at args i))
		  (if (= arg "-o") (set output arg2)
		    (= arg "-t") (set target1 arg2)
		    (= arg "-e") (set expr arg2))))
	    (= arg "-m") (set embed-macros? true)
	    (= "-" (sub arg 0 1))
	    (do (print "unrecognized option:" arg) (usage))
	  (push inputs arg)))
      (if output
	  (do (if target1 (set target target1))
	      (local compiled (compile-files inputs))
	      (local main (compile '(main) true))
	      (write-file output (cat compiled embedded-macros main)))
	(do (across (inputs file)
	      (eval (compile-file file)))
	    (if expr (rep expr) (repl))))))
