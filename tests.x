;; -*- mode: lisp -*-

(set passed 0)

(defun assert-equal (a b)
  (local sa (to-string a))
  (local sb (to-string b))
  (if (not (= sa sb))
      (error (cat " failed: expected " sa " was " sb))
    (set passed (+ passed 1))))

(defun run-tests ()
  (print " running tests...")
  ;; numbers
  (assert-equal 18 18.00)
  (assert-equal 123 1.23e2)
  (assert-equal 0.123 123e-3)
  (assert-equal 17 (+ 16 1))
  (assert-equal 4 (- 7 3))
  (assert-equal 5.0 (/ 10 2))
  (assert-equal 6 (* 2 3.00))
  ;; booleans
  (assert-equal true (not false))
  (assert-equal true (or true false))
  (assert-equal false (and true false))
  (assert-equal 17 (if true 17 18))
  (assert-equal 18 (if false 17 18))
  ;; strings
  (assert-equal "foo" "foo")
  (assert-equal "\"bar\"" "\"bar\"")
  (assert-equal 1 (length "\""))
  (assert-equal 2 (length "a\""))
  (assert-equal "foobar" (cat "foo" "bar"))
  (assert-equal 2 (length (cat "\"" "\"")))
  (assert-equal 'a "a")
  (assert-equal 'a (quote a))
  (assert-equal "a" (char "bar" 1))
  (assert-equal "uu" (sub "quux" 1 3))
  ;; lists
  (assert-equal '() (list))
  (assert-equal '(1) (list 1))
  (assert-equal '(a) (list 'a))
  (assert-equal '(a) (list "a"))
  (assert-equal false (= '(a) '("a")))
  (assert-equal 5 (length '(1 2 3 4 5)))
  (assert-equal 3 (length '(1 (2 3 4) 5)))
  (assert-equal 3 (length (at '(1 (2 3 4) 5) 1)))
  (local a 'bar)
  (assert-equal '(1 2 bar) '(1 2 ,a))
  (assert-equal (list (list 'bar)) '((,a)))
  (assert-equal false (= '"a" "a"))
  (assert-equal false (= (list "a") '("a")))
  (assert-equal '(a (2 3 7 b)) '(a ,(list 2 3 7 'b)))
  (assert-equal '(1 2 3) (join '(1) '(2 3)))
  (assert-equal '(1 2 3 4) (join '(1) (join '(2) '(3 4))))
  (set a '(2 3))
  (assert-equal '(1 2 3 4) '(1 ,@a 4))
  (assert-equal '(1 2 3 4) '(1 ,@(list 2 3) 4))
  (assert-equal '(1 2 3) '(1 ,@a))
  (assert-equal '(2 3) '(,@a))
  ;; eval
  (assert-equal 4 (eval (compile '(+ 2 2))))
  (assert-equal 'foo (eval (compile '(quote foo))))
  ;; apply
  (assert-equal '(2 3) (apply join '((2) (3))))
  (apply assert-equal (list 4 4))
  ;; functions
  (local f (lambda (x) (+ x 1)))
  (assert-equal 2 (f 1))
  (assert-equal 3 (apply (lambda (a b) (+ a b)) '(1 2)))
  (assert-equal '(1 2) (apply (lambda (a...) a) '(1 2)))
  (assert-equal '((1 2)) (apply (lambda (a...) '(,a)) '(1 2)))
  (assert-equal '(1 2) (apply (lambda (a...) '(,@a)) '(1 2)))
  (set f (lambda (a...) a))
  (assert-equal '(a b) (f 'a 'b))
  (assert-equal 42 ((lambda () 42)))
  ;; tables
  (local t (table))
  (set (get t 'foo) 17)
  (assert-equal (table foo 17) t)
  (set (get t 'bar) 42)
  (assert-equal (table foo 17 'bar 42) t)
  ;; sets
  (local s (make-set a b c))
  (assert-equal true (get s 'a))
  (assert-equal true (get s 'c))
  (assert-equal nil (get s 'x))
  ;; iteration
  (local x 0)
  (local l '(1 2 3 4 5))
  (across (l v)
    (set x (+ x v)))
  (assert-equal x 15)
  (local l2 '())
  (across (l v i)
    (set (at l2 i) v))
  (assert-equal l l2)
  (set x 0)
  (set t (table foo 10 bar 100))
  (each (t k v)
    (if (= k 'foo)
	(set x (+ x v 1))
      (set x (+ x v 10))))
  (assert-equal x 121)
  (print (cat " " passed " passed")))
